// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/did/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDIDDocumentRequest is the request type for the Query/DIDDocument method
type QueryDIDDocumentRequest struct {
	// DID unique identifier of the DID Document to fetch.
	// UUID-style DIDs as well as Indy-style DID are supported.
	//
	// Format: did:swtr:<unique-identifier>
	//
	// Examples:
	// - did:swtr:c82f2b02-bdab-4dd7-b833-3e143745d612
	// - did:swtr:wGHEXrZvJxR8vw5P3UWH1j
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryDIDDocumentRequest) Reset()         { *m = QueryDIDDocumentRequest{} }
func (m *QueryDIDDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentRequest) ProtoMessage()    {}
func (*QueryDIDDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{0}
}
func (m *QueryDIDDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentRequest.Merge(m, src)
}
func (m *QueryDIDDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentRequest proto.InternalMessageInfo

func (m *QueryDIDDocumentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryDIDDocumentResponse is the response type for the Query/DIDDocument
// method
type QueryDIDDocumentResponse struct {
	// Successful resolution of the DID Document returns the following:
	// - did_doc is the latest version of the DID Document
	// - metadata is is the DID Document metadata associated with the latest
	// version of the DID Document
	Value *DIDDocumentWithMetadata `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryDIDDocumentResponse) Reset()         { *m = QueryDIDDocumentResponse{} }
func (m *QueryDIDDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentResponse) ProtoMessage()    {}
func (*QueryDIDDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{1}
}
func (m *QueryDIDDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentResponse.Merge(m, src)
}
func (m *QueryDIDDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentResponse proto.InternalMessageInfo

func (m *QueryDIDDocumentResponse) GetValue() *DIDDocumentWithMetadata {
	if m != nil {
		return m.Value
	}
	return nil
}

// QueryDIDDocumentVersionRequest is the request type for the
// QueryDIDDocumentVersion method
type QueryDIDDocumentVersionRequest struct {
	// DID unique identifier of the DID Document to fetch.
	// UUID-style DIDs as well as Indy-style DID are supported.
	//
	// Format: did:swtr:<unique-identifier>
	//
	// Examples:
	// - did:swtr:c82f2b02-bdab-4dd7-b833-3e143745d612
	// - did:swtr:wGHEXrZvJxR8vw5P3UWH1j
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique version identifier of the DID Document to fetch.
	// Returns the specified version of the DID Document.
	//
	// Format: <uuid>
	//
	// Example: 93f2573c-eca9-4098-96cb-a1ec676a29ed
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryDIDDocumentVersionRequest) Reset()         { *m = QueryDIDDocumentVersionRequest{} }
func (m *QueryDIDDocumentVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentVersionRequest) ProtoMessage()    {}
func (*QueryDIDDocumentVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{2}
}
func (m *QueryDIDDocumentVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentVersionRequest.Merge(m, src)
}
func (m *QueryDIDDocumentVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentVersionRequest proto.InternalMessageInfo

func (m *QueryDIDDocumentVersionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryDIDDocumentVersionRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// QueryDIDDocumentVersionResponse is the response type for the
// QueryDIDDocumentVersion method
type QueryDIDDocumentVersionResponse struct {
	// Successful resolution of the DID Document returns the following:
	// - did_doc is the requested version of the DID Document
	// - metadata is DID Document metadata associated with the requested version
	// of the DID Document
	Value *DIDDocumentWithMetadata `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryDIDDocumentVersionResponse) Reset()         { *m = QueryDIDDocumentVersionResponse{} }
func (m *QueryDIDDocumentVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDIDDocumentVersionResponse) ProtoMessage()    {}
func (*QueryDIDDocumentVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{3}
}
func (m *QueryDIDDocumentVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDIDDocumentVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDIDDocumentVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDIDDocumentVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDIDDocumentVersionResponse.Merge(m, src)
}
func (m *QueryDIDDocumentVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDIDDocumentVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDIDDocumentVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDIDDocumentVersionResponse proto.InternalMessageInfo

func (m *QueryDIDDocumentVersionResponse) GetValue() *DIDDocumentWithMetadata {
	if m != nil {
		return m.Value
	}
	return nil
}

// QueryAllDIDDocumentVersionsMetadataRequest is the request type for the
// QueryAllDIDDocumentVersionsMetadata method
type QueryAllDIDDocumentVersionsMetadataRequest struct {
	// DID unique identifier of the DID Document to fetch version metadata.
	// UUID-style DIDs as well as Indy-style DID are supported.
	//
	// Format: did:swtr:<unique-identifier>
	//
	// Examples:
	// - did:swtr:c82f2b02-bdab-4dd7-b833-3e143745d612
	// - did:swtr:wGHEXrZvJxR8vw5P3UWH1j
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDIDDocumentVersionsMetadataRequest) Reset() {
	*m = QueryAllDIDDocumentVersionsMetadataRequest{}
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllDIDDocumentVersionsMetadataRequest) ProtoMessage() {}
func (*QueryAllDIDDocumentVersionsMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{4}
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataRequest.Merge(m, src)
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataRequest proto.InternalMessageInfo

func (m *QueryAllDIDDocumentVersionsMetadataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryAllDIDDocumentVersionsMetadataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDIDDocumentVersionsMetadataResponse is the response type for the
// QueryAllDIDDocumentVersionsMetadata method
type QueryAllDIDDocumentVersionsMetadataResponse struct {
	// versions is the list of all versions of the requested DID Document
	Versions []*Metadata `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDIDDocumentVersionsMetadataResponse) Reset() {
	*m = QueryAllDIDDocumentVersionsMetadataResponse{}
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllDIDDocumentVersionsMetadataResponse) ProtoMessage() {}
func (*QueryAllDIDDocumentVersionsMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{5}
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataResponse.Merge(m, src)
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDIDDocumentVersionsMetadataResponse proto.InternalMessageInfo

func (m *QueryAllDIDDocumentVersionsMetadataResponse) GetVersions() []*Metadata {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *QueryAllDIDDocumentVersionsMetadataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryResourceRequest is the request type for the Query/Resource RPC method
type QueryResourceRequest struct {
	// collection_id is an identifier of the DID Document the resource belongs to.
	// Format: <unique-identifier>
	//
	// Examples:
	// - c82f2b02-bdab-4dd7-b833-3e143745d612
	// - wGHEXrZvJxR8vw5P3UWH1j
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// id is a unique id of the resource.
	// Format: <uuid>
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryResourceRequest) Reset()         { *m = QueryResourceRequest{} }
func (m *QueryResourceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResourceRequest) ProtoMessage()    {}
func (*QueryResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{6}
}
func (m *QueryResourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceRequest.Merge(m, src)
}
func (m *QueryResourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceRequest proto.InternalMessageInfo

func (m *QueryResourceRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryResourceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryResourceResponse is the response type for the Query/Resource RPC method
type QueryResourceResponse struct {
	// Successful resolution of the resource returns the following:
	// - resource is the requested resource
	// - metadata is the resource metadata associated with the requested resource
	Resource *ResourceWithMetadata `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (m *QueryResourceResponse) Reset()         { *m = QueryResourceResponse{} }
func (m *QueryResourceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResourceResponse) ProtoMessage()    {}
func (*QueryResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{7}
}
func (m *QueryResourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceResponse.Merge(m, src)
}
func (m *QueryResourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceResponse proto.InternalMessageInfo

func (m *QueryResourceResponse) GetResource() *ResourceWithMetadata {
	if m != nil {
		return m.Resource
	}
	return nil
}

// QueryResourceMetadataRequest is the request type for the QueryResourceMetadata RPC method
type QueryResourceMetadataRequest struct {
	// collection_id is an identifier of the DID Document the resource belongs to.
	// Format: <unique-identifier>
	//
	// Examples:
	// - c82f2b02-bdab-4dd7-b833-3e143745d612
	// - wGHEXrZvJxR8vw5P3UWH1j
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// id is a unique id of the resource.
	// Format: <uuid>
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryResourceMetadataRequest) Reset()         { *m = QueryResourceMetadataRequest{} }
func (m *QueryResourceMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResourceMetadataRequest) ProtoMessage()    {}
func (*QueryResourceMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{8}
}
func (m *QueryResourceMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceMetadataRequest.Merge(m, src)
}
func (m *QueryResourceMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceMetadataRequest proto.InternalMessageInfo

func (m *QueryResourceMetadataRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryResourceMetadataRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryResourceMetadataResponse is the response type for the QueryResourceMetadata RPC method
type QueryResourceMetadataResponse struct {
	// resource is the requested resource metadata
	Resource *ResourceMetadata `protobuf:"bytes,1,opt,name=resource,proto3" json:"linkedResourceMetadata"`
}

func (m *QueryResourceMetadataResponse) Reset()         { *m = QueryResourceMetadataResponse{} }
func (m *QueryResourceMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResourceMetadataResponse) ProtoMessage()    {}
func (*QueryResourceMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{9}
}
func (m *QueryResourceMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceMetadataResponse.Merge(m, src)
}
func (m *QueryResourceMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceMetadataResponse proto.InternalMessageInfo

func (m *QueryResourceMetadataResponse) GetResource() *ResourceMetadata {
	if m != nil {
		return m.Resource
	}
	return nil
}

// QueryCollectionResourcesRequest is the request type for the QueryCollectionResources RPC method
type QueryCollectionResourcesRequest struct {
	// collection_id is an identifier of the DID Document the resource belongs to.
	// Format: <unique-identifier>
	//
	// Examples:
	// - c82f2b02-bdab-4dd7-b833-3e143745d612
	// - wGHEXrZvJxR8vw5P3UWH1j
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCollectionResourcesRequest) Reset()         { *m = QueryCollectionResourcesRequest{} }
func (m *QueryCollectionResourcesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionResourcesRequest) ProtoMessage()    {}
func (*QueryCollectionResourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{10}
}
func (m *QueryCollectionResourcesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionResourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionResourcesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionResourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionResourcesRequest.Merge(m, src)
}
func (m *QueryCollectionResourcesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionResourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionResourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionResourcesRequest proto.InternalMessageInfo

func (m *QueryCollectionResourcesRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryCollectionResourcesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCollectionResourcesResponse is the response type for the QueryCollectionResources RPC method
type QueryCollectionResourcesResponse struct {
	// resources is the requested collection of resource metadata
	Resources []*ResourceMetadata `protobuf:"bytes,1,rep,name=resources,proto3" json:"linkedResourceMetadata"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCollectionResourcesResponse) Reset()         { *m = QueryCollectionResourcesResponse{} }
func (m *QueryCollectionResourcesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionResourcesResponse) ProtoMessage()    {}
func (*QueryCollectionResourcesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b650eb3a6a27876, []int{11}
}
func (m *QueryCollectionResourcesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionResourcesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionResourcesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionResourcesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionResourcesResponse.Merge(m, src)
}
func (m *QueryCollectionResourcesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionResourcesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionResourcesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionResourcesResponse proto.InternalMessageInfo

func (m *QueryCollectionResourcesResponse) GetResources() []*ResourceMetadata {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *QueryCollectionResourcesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDIDDocumentRequest)(nil), "swisstronik.did.QueryDIDDocumentRequest")
	proto.RegisterType((*QueryDIDDocumentResponse)(nil), "swisstronik.did.QueryDIDDocumentResponse")
	proto.RegisterType((*QueryDIDDocumentVersionRequest)(nil), "swisstronik.did.QueryDIDDocumentVersionRequest")
	proto.RegisterType((*QueryDIDDocumentVersionResponse)(nil), "swisstronik.did.QueryDIDDocumentVersionResponse")
	proto.RegisterType((*QueryAllDIDDocumentVersionsMetadataRequest)(nil), "swisstronik.did.QueryAllDIDDocumentVersionsMetadataRequest")
	proto.RegisterType((*QueryAllDIDDocumentVersionsMetadataResponse)(nil), "swisstronik.did.QueryAllDIDDocumentVersionsMetadataResponse")
	proto.RegisterType((*QueryResourceRequest)(nil), "swisstronik.did.QueryResourceRequest")
	proto.RegisterType((*QueryResourceResponse)(nil), "swisstronik.did.QueryResourceResponse")
	proto.RegisterType((*QueryResourceMetadataRequest)(nil), "swisstronik.did.QueryResourceMetadataRequest")
	proto.RegisterType((*QueryResourceMetadataResponse)(nil), "swisstronik.did.QueryResourceMetadataResponse")
	proto.RegisterType((*QueryCollectionResourcesRequest)(nil), "swisstronik.did.QueryCollectionResourcesRequest")
	proto.RegisterType((*QueryCollectionResourcesResponse)(nil), "swisstronik.did.QueryCollectionResourcesResponse")
}

func init() { proto.RegisterFile("swisstronik/did/query.proto", fileDescriptor_3b650eb3a6a27876) }

var fileDescriptor_3b650eb3a6a27876 = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdf, 0x4f, 0xd3, 0x5c,
	0x18, 0xc7, 0x39, 0x7b, 0xc3, 0x0b, 0x3c, 0x7b, 0x5f, 0x24, 0x47, 0x84, 0x51, 0xb1, 0xcc, 0x1a,
	0x60, 0x60, 0xe8, 0x71, 0x33, 0x18, 0x13, 0x0d, 0x09, 0x48, 0x34, 0x68, 0x4c, 0x74, 0x26, 0x1a,
	0xf1, 0xc2, 0x94, 0xf5, 0x64, 0x36, 0x94, 0x9e, 0xd1, 0xd3, 0x81, 0x40, 0xb8, 0x31, 0x5e, 0x1b,
	0x12, 0xff, 0x02, 0xaf, 0x8d, 0x17, 0xde, 0xfb, 0x07, 0x70, 0x49, 0xe2, 0x8d, 0x89, 0x89, 0x31,
	0xe0, 0x95, 0x7f, 0x85, 0xd9, 0xe9, 0x69, 0xb7, 0xb5, 0x2b, 0x1b, 0xc8, 0x5d, 0xd7, 0xf3, 0x7d,
	0x9e, 0xe7, 0xf3, 0xfc, 0x38, 0xcf, 0x0a, 0x17, 0xf9, 0xa6, 0xc5, 0xb9, 0xe7, 0x32, 0xc7, 0x5a,
	0x25, 0xa6, 0x65, 0x92, 0xf5, 0x2a, 0x75, 0xb7, 0xf4, 0x8a, 0xcb, 0x3c, 0x86, 0xcf, 0x35, 0x1c,
	0xea, 0xa6, 0x65, 0x2a, 0x6a, 0x54, 0x6d, 0xb2, 0x52, 0x75, 0x8d, 0x3a, 0x9e, 0x6f, 0x10, 0x3f,
	0x77, 0x29, 0x67, 0x55, 0xb7, 0x44, 0xe5, 0xf9, 0x60, 0x99, 0x95, 0x99, 0x78, 0x24, 0xb5, 0x27,
	0xf9, 0x76, 0xb4, 0xcc, 0x58, 0xd9, 0xa6, 0xc4, 0xa8, 0x58, 0xc4, 0x70, 0x1c, 0xe6, 0x19, 0x9e,
	0xc5, 0x1c, 0x2e, 0x4f, 0xa7, 0x4b, 0x8c, 0xaf, 0x31, 0x4e, 0x56, 0x0c, 0x4e, 0x7d, 0x3a, 0xb2,
	0x91, 0x5f, 0xa1, 0x9e, 0x91, 0x27, 0x15, 0xa3, 0x6c, 0x39, 0x42, 0xec, 0x6b, 0xb5, 0x29, 0x18,
	0x7e, 0x5c, 0x53, 0x2c, 0x2e, 0x2d, 0x2e, 0x4a, 0xb2, 0x22, 0x5d, 0xaf, 0x52, 0xee, 0xe1, 0x7e,
	0x48, 0x59, 0x66, 0x06, 0x65, 0x51, 0xae, 0xaf, 0x98, 0xb2, 0x4c, 0x6d, 0x19, 0x32, 0x71, 0x29,
	0xaf, 0x30, 0x87, 0x53, 0x3c, 0x07, 0xdd, 0x1b, 0x86, 0x5d, 0xa5, 0x42, 0x9e, 0x2e, 0xe4, 0xf4,
	0x48, 0x1d, 0xf4, 0x06, 0xa3, 0x67, 0x96, 0xf7, 0xea, 0x21, 0xf5, 0x0c, 0xd3, 0xf0, 0x8c, 0xa2,
	0x6f, 0xa6, 0xdd, 0x07, 0x35, 0xea, 0xfb, 0x29, 0x75, 0xb9, 0xc5, 0x9c, 0x04, 0x1a, 0x9c, 0x81,
	0x9e, 0x0d, 0x5f, 0x91, 0x49, 0x89, 0x97, 0xc1, 0x4f, 0xcd, 0x80, 0xb1, 0x44, 0x5f, 0x67, 0x84,
	0xfb, 0x16, 0xc1, 0xb4, 0x88, 0x31, 0x6f, 0xdb, 0xf1, 0x30, 0x3c, 0x94, 0x27, 0xb0, 0xdf, 0x05,
	0xa8, 0x37, 0x42, 0xe0, 0xa7, 0x0b, 0x13, 0xba, 0xdf, 0x35, 0xbd, 0xd6, 0x35, 0xdd, 0x9f, 0x29,
	0xd9, 0x35, 0xfd, 0x91, 0x51, 0xa6, 0xd2, 0x57, 0xb1, 0xc1, 0x52, 0xfb, 0x84, 0xe0, 0x6a, 0x47,
	0x18, 0x32, 0xed, 0x59, 0xe8, 0x95, 0x45, 0xe2, 0x19, 0x94, 0xfd, 0x27, 0x97, 0x2e, 0x8c, 0xc4,
	0x32, 0x0f, 0x8d, 0x42, 0x29, 0xbe, 0xd7, 0x02, 0x77, 0xb2, 0x2d, 0xae, 0x1f, 0xb3, 0x89, 0xf7,
	0x01, 0x0c, 0x0a, 0xdc, 0xa2, 0x9c, 0xf1, 0xa0, 0x3e, 0x57, 0xe0, 0xff, 0x12, 0xb3, 0x6d, 0x5a,
	0xaa, 0xa9, 0x5e, 0x86, 0xa5, 0xfa, 0xaf, 0xfe, 0x72, 0xc9, 0x94, 0x45, 0x4c, 0x35, 0x8c, 0xe3,
	0x85, 0x88, 0x33, 0x99, 0xe5, 0x3c, 0xf4, 0x06, 0x97, 0x48, 0xf6, 0x77, 0x3c, 0x96, 0x65, 0x60,
	0xd4, 0xd4, 0xdc, 0xd0, 0x4c, 0x7b, 0x02, 0xa3, 0x4d, 0xbe, 0xa3, 0x0d, 0x3d, 0x15, 0xf0, 0x36,
	0x5c, 0x4a, 0x70, 0x2a, 0xc1, 0x9f, 0xc7, 0xc0, 0x2f, 0x27, 0x82, 0x07, 0xc6, 0x0b, 0xca, 0xef,
	0x1f, 0x63, 0x43, 0xb6, 0xe5, 0xac, 0x52, 0x33, 0xe6, 0xb8, 0x9e, 0xd0, 0x3b, 0x24, 0x2f, 0xc5,
	0x9d, 0x90, 0x30, 0x50, 0xf3, 0x13, 0x25, 0x75, 0x56, 0xa3, 0xbb, 0x8f, 0x20, 0x9b, 0x0c, 0x24,
	0x0b, 0xf2, 0x02, 0xfa, 0x82, 0x0c, 0x82, 0x81, 0xfd, 0xcb, 0x8a, 0xd4, 0xfd, 0x9d, 0xd9, 0x54,
	0x17, 0xbe, 0xf7, 0x40, 0xb7, 0x48, 0x05, 0x6f, 0x43, 0xba, 0xe1, 0x1a, 0xe2, 0xf8, 0x5a, 0x49,
	0x58, 0xb5, 0xca, 0x54, 0x07, 0x4a, 0x3f, 0xb2, 0x36, 0xf4, 0xe6, 0xeb, 0xaf, 0xf7, 0xa9, 0x01,
	0xdc, 0x4f, 0xf8, 0xa6, 0xe7, 0x8a, 0xbf, 0x8c, 0x1d, 0xcb, 0xdc, 0xc5, 0x1f, 0x10, 0xe0, 0xf8,
	0x0e, 0xc0, 0xa4, 0xad, 0xe7, 0xe6, 0x3d, 0xab, 0x5c, 0xeb, 0xdc, 0x40, 0x12, 0xe5, 0x04, 0x91,
	0x86, 0xb3, 0xcd, 0x44, 0x44, 0xee, 0x0f, 0xb2, 0x23, 0x1f, 0x76, 0xf1, 0x17, 0x04, 0xea, 0xf1,
	0xab, 0x0a, 0xdf, 0x6a, 0x1d, 0xbe, 0xa3, 0x3d, 0xab, 0xdc, 0x3e, 0x9d, 0xb1, 0xcc, 0x63, 0x4c,
	0xe4, 0x31, 0x82, 0x87, 0x5b, 0xe7, 0xc1, 0xf1, 0x1e, 0x82, 0xde, 0x60, 0xa2, 0xf0, 0x78, 0xeb,
	0x58, 0x91, 0xd5, 0xa6, 0x4c, 0xb4, 0x93, 0xc9, 0xe0, 0xb3, 0x22, 0x38, 0xc1, 0x33, 0x7e, 0xf0,
	0x60, 0x4c, 0xc9, 0x4e, 0xd3, 0x95, 0xdc, 0x0d, 0x0f, 0xb8, 0xdf, 0xf5, 0xcf, 0x08, 0x06, 0xa2,
	0x43, 0x8e, 0x67, 0x8e, 0x8f, 0x19, 0xad, 0x9a, 0xde, 0xa9, 0x5c, 0xa2, 0xce, 0x09, 0xd4, 0x9b,
	0xf8, 0xc6, 0x89, 0x50, 0xc9, 0x5a, 0x80, 0xf7, 0x11, 0xc1, 0xf9, 0x16, 0xb7, 0x1e, 0x27, 0x4c,
	0x5e, 0xf2, 0xc6, 0x52, 0xf2, 0x27, 0xb0, 0x90, 0xf0, 0x44, 0xc0, 0x4f, 0xe1, 0xc9, 0x36, 0xf0,
	0x01, 0xed, 0x42, 0x7e, 0xff, 0x50, 0x45, 0x07, 0x87, 0x2a, 0xfa, 0x79, 0xa8, 0xa2, 0xbd, 0x23,
	0xb5, 0xeb, 0xe0, 0x48, 0xed, 0xfa, 0x76, 0xa4, 0x76, 0x2d, 0x0f, 0x37, 0x7e, 0xba, 0xbd, 0x16,
	0xf3, 0xe2, 0x6d, 0x55, 0x28, 0x5f, 0xf9, 0x57, 0x7c, 0x5a, 0x5d, 0xff, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x16, 0xd9, 0x1a, 0x55, 0x2a, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Fetch latest version of a DID Document for a given DID
	DIDDocument(ctx context.Context, in *QueryDIDDocumentRequest, opts ...grpc.CallOption) (*QueryDIDDocumentResponse, error)
	// Fetch specific version of a DID Document for a given DID
	DIDDocumentVersion(ctx context.Context, in *QueryDIDDocumentVersionRequest, opts ...grpc.CallOption) (*QueryDIDDocumentVersionResponse, error)
	// Fetch list of all versions of DID Documents for a given DID
	AllDIDDocumentVersionsMetadata(ctx context.Context, in *QueryAllDIDDocumentVersionsMetadataRequest, opts ...grpc.CallOption) (*QueryAllDIDDocumentVersionsMetadataResponse, error)
	// Fetch data/payload for a specific resource (without metadata)
	Resource(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (*QueryResourceResponse, error)
	// Fetch only metadata for a specific resource
	ResourceMetadata(ctx context.Context, in *QueryResourceMetadataRequest, opts ...grpc.CallOption) (*QueryResourceMetadataResponse, error)
	// Fetch metadata for all resources in a collection
	CollectionResources(ctx context.Context, in *QueryCollectionResourcesRequest, opts ...grpc.CallOption) (*QueryCollectionResourcesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DIDDocument(ctx context.Context, in *QueryDIDDocumentRequest, opts ...grpc.CallOption) (*QueryDIDDocumentResponse, error) {
	out := new(QueryDIDDocumentResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.did.Query/DIDDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DIDDocumentVersion(ctx context.Context, in *QueryDIDDocumentVersionRequest, opts ...grpc.CallOption) (*QueryDIDDocumentVersionResponse, error) {
	out := new(QueryDIDDocumentVersionResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.did.Query/DIDDocumentVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDIDDocumentVersionsMetadata(ctx context.Context, in *QueryAllDIDDocumentVersionsMetadataRequest, opts ...grpc.CallOption) (*QueryAllDIDDocumentVersionsMetadataResponse, error) {
	out := new(QueryAllDIDDocumentVersionsMetadataResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.did.Query/AllDIDDocumentVersionsMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Resource(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (*QueryResourceResponse, error) {
	out := new(QueryResourceResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.did.Query/Resource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResourceMetadata(ctx context.Context, in *QueryResourceMetadataRequest, opts ...grpc.CallOption) (*QueryResourceMetadataResponse, error) {
	out := new(QueryResourceMetadataResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.did.Query/ResourceMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionResources(ctx context.Context, in *QueryCollectionResourcesRequest, opts ...grpc.CallOption) (*QueryCollectionResourcesResponse, error) {
	out := new(QueryCollectionResourcesResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.did.Query/CollectionResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Fetch latest version of a DID Document for a given DID
	DIDDocument(context.Context, *QueryDIDDocumentRequest) (*QueryDIDDocumentResponse, error)
	// Fetch specific version of a DID Document for a given DID
	DIDDocumentVersion(context.Context, *QueryDIDDocumentVersionRequest) (*QueryDIDDocumentVersionResponse, error)
	// Fetch list of all versions of DID Documents for a given DID
	AllDIDDocumentVersionsMetadata(context.Context, *QueryAllDIDDocumentVersionsMetadataRequest) (*QueryAllDIDDocumentVersionsMetadataResponse, error)
	// Fetch data/payload for a specific resource (without metadata)
	Resource(context.Context, *QueryResourceRequest) (*QueryResourceResponse, error)
	// Fetch only metadata for a specific resource
	ResourceMetadata(context.Context, *QueryResourceMetadataRequest) (*QueryResourceMetadataResponse, error)
	// Fetch metadata for all resources in a collection
	CollectionResources(context.Context, *QueryCollectionResourcesRequest) (*QueryCollectionResourcesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DIDDocument(ctx context.Context, req *QueryDIDDocumentRequest) (*QueryDIDDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocument not implemented")
}
func (*UnimplementedQueryServer) DIDDocumentVersion(ctx context.Context, req *QueryDIDDocumentVersionRequest) (*QueryDIDDocumentVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DIDDocumentVersion not implemented")
}
func (*UnimplementedQueryServer) AllDIDDocumentVersionsMetadata(ctx context.Context, req *QueryAllDIDDocumentVersionsMetadataRequest) (*QueryAllDIDDocumentVersionsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDIDDocumentVersionsMetadata not implemented")
}
func (*UnimplementedQueryServer) Resource(ctx context.Context, req *QueryResourceRequest) (*QueryResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resource not implemented")
}
func (*UnimplementedQueryServer) ResourceMetadata(ctx context.Context, req *QueryResourceMetadataRequest) (*QueryResourceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceMetadata not implemented")
}
func (*UnimplementedQueryServer) CollectionResources(ctx context.Context, req *QueryCollectionResourcesRequest) (*QueryCollectionResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionResources not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DIDDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDIDDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.did.Query/DIDDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocument(ctx, req.(*QueryDIDDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DIDDocumentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDIDDocumentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DIDDocumentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.did.Query/DIDDocumentVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DIDDocumentVersion(ctx, req.(*QueryDIDDocumentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDIDDocumentVersionsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDIDDocumentVersionsMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDIDDocumentVersionsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.did.Query/AllDIDDocumentVersionsMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDIDDocumentVersionsMetadata(ctx, req.(*QueryAllDIDDocumentVersionsMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Resource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Resource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.did.Query/Resource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Resource(ctx, req.(*QueryResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResourceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResourceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.did.Query/ResourceMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResourceMetadata(ctx, req.(*QueryResourceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.did.Query/CollectionResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionResources(ctx, req.(*QueryCollectionResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swisstronik.did.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DIDDocument",
			Handler:    _Query_DIDDocument_Handler,
		},
		{
			MethodName: "DIDDocumentVersion",
			Handler:    _Query_DIDDocumentVersion_Handler,
		},
		{
			MethodName: "AllDIDDocumentVersionsMetadata",
			Handler:    _Query_AllDIDDocumentVersionsMetadata_Handler,
		},
		{
			MethodName: "Resource",
			Handler:    _Query_Resource_Handler,
		},
		{
			MethodName: "ResourceMetadata",
			Handler:    _Query_ResourceMetadata_Handler,
		},
		{
			MethodName: "CollectionResources",
			Handler:    _Query_CollectionResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swisstronik/did/query.proto",
}

func (m *QueryDIDDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDIDDocumentVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDIDDocumentVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDIDDocumentVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDIDDocumentVersionsMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDIDDocumentVersionsMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDIDDocumentVersionsMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDIDDocumentVersionsMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDIDDocumentVersionsMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDIDDocumentVersionsMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionResourcesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionResourcesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionResourcesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionResourcesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionResourcesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionResourcesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDIDDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDIDDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDIDDocumentVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDIDDocumentVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDIDDocumentVersionsMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDIDDocumentVersionsMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionResourcesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCollectionResourcesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDIDDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &DIDDocumentWithMetadata{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDIDDocumentVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDIDDocumentVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDIDDocumentVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &DIDDocumentWithMetadata{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDIDDocumentVersionsMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDIDDocumentVersionsMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDIDDocumentVersionsMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDIDDocumentVersionsMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDIDDocumentVersionsMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDIDDocumentVersionsMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, &Metadata{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &ResourceWithMetadata{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &ResourceMetadata{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionResourcesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionResourcesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionResourcesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionResourcesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionResourcesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionResourcesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &ResourceMetadata{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
